from langchain.prompts import PromptTemplate, FewShotPromptTemplate
from langchain.llms import OpenAI
from langchain.chains import LLMChain
import streamlit as st

# Few-shot Ã¶ÄŸrenme iÃ§in Ã¶rnekler
examples = [
    {
        "text": "The product exceeded my expectations and works flawlessly!",
        "sentiment": "Pozitif",
        "explanation": "The text expresses satisfaction and enthusiasm with terms like 'exceeded my expectations' and 'flawlessly', indicating a positive sentiment."
    },
    {
        "text": "Hizmet berbattÄ± ve personel Ã§ok kabaydÄ±.",
        "sentiment": "Olumsuz",
        "explanation": "'KorkunÃ§' ve 'kaba' gibi kelimelerin kullanÄ±lmasÄ± aÃ§Ä±kÃ§a memnuniyetsizliÄŸi belirtir, bu da olumsuz bir duygudur."
    },
    {
        "text": "Bulasik makinelerinin vazgeÃ§ilmezi Butun bulasiklar tertemiz ve parlak olarak cikiyor Icim rahat.",
        "sentiment": "Pozitif",
        "explanation": "Ã¼rÃ¼nden memnun kaldÄ±ÄŸÄ±nÄ±,gÃ¶nÃ¼l rahatlÄ±ÄŸÄ±yla kullandÄ±ÄŸÄ±nÄ± belirtiyor."
    },

]
# Ã–rnekler iÃ§in ÅŸablon
example_template = """
Text: {text}
Sentiment: {sentiment}
Explanation: {explanation}
"""

# Bu ÅŸablonla prompt oluÅŸturuluyor
example_prompt = PromptTemplate(
    input_variables=["text", "sentiment", "explanation"],
    template=example_template
)

# FewShotPromptTemplate oluÅŸturma
few_shot_prompt = FewShotPromptTemplate(
    examples=examples,
    example_prompt=example_prompt,
    prefix = "You are an expert sentiment analysis model. I want you to output the model in the language used for user input. Analyze the sentiment of the text provided. Let the sentiment in the model depend on the model's judgment." ,
    suffix="\nNow analyze the following text.\n\nText: {text}\nSentiment:\nExplanation:",
    input_variables=["text"]  # 'text' deÄŸiÅŸkeni burada kullanÄ±lacak
)

# LLMChain ve OpenAI baÄŸlantÄ±sÄ±
def llm_chain(text_to_analyze):
    llm = OpenAI(temperature=0.4)
    chain = LLMChain(llm=llm, prompt=few_shot_prompt)
    
    
    result = ''
    for chunk in chain.stream(text_to_analyze):  # stream() generatorâ€™dÃ¼r.
        print(chunk)  
        if isinstance(chunk, dict) and "text" in chunk:
            result += chunk["text"]  
        else:
            result += str(chunk) 

    return result  

# Streamlit arayÃ¼zÃ¼
def main():
    st.set_page_config(page_title="Sentiment Analysis", page_icon="ğŸ’¬", layout="wide")
    
    # Sidebar iÃ§in dil seÃ§eneÄŸi ekleniyor
    language = st.sidebar.selectbox("Select Language", ("English", "TÃ¼rkÃ§e"))
    
    # Dil tercihini session_state'de saklÄ±yoruz
    if "language" not in st.session_state:
        st.session_state.language = "English"  # VarsayÄ±lan dil Ä°ngilizce
    else:
        st.session_state.language = language

    # Sidebar'da kullanÄ±cÄ±nÄ±n sorduÄŸu sorularÄ± kaydetmek
    if "queries" not in st.session_state:
        st.session_state.queries = []

    # Sidebar'da sorduÄŸu sorularÄ± listele
    if st.session_state.language == "TÃ¼rkÃ§e":
        st.sidebar.write("SorularÄ±nÄ±z:")
    else:
        st.sidebar.write("Your Queries:")

    for query in st.session_state.queries:
        st.sidebar.write(query)

    # KullanÄ±cÄ±ya sorularÄ± silme seÃ§eneÄŸi sunuluyor.
    if st.sidebar.button("Clear All Questions"):
        st.session_state.queries = []  # TÃ¼m sorularÄ± siler

    # BaÅŸlÄ±k
    if st.session_state.language == "TÃ¼rkÃ§e":
        st.title("Duygu Analizi")
        st.markdown("""
        Verilen bir metnin duygusunu analiz edin.
        """)
    else:
        st.title("Sentiment Analysis")
        st.markdown("""
        Analyze the sentiment of a given text.
        """)

    # KullanÄ±cÄ±dan metin giriÅŸi al
    text_to_analyze = st.text_input("Enter text to analyze:" if st.session_state.language == "English" else "Analiz edilecek metni girin:")

    # Analiz butonuna tÄ±klanmasÄ± durumunda
    if st.button("Analyze" if st.session_state.language == "English" else "Analiz Et"):
        if text_to_analyze:
            # KullanÄ±cÄ±yÄ± kaydet
            st.session_state.queries.append(text_to_analyze)

            with st.spinner("Analyzing..." if st.session_state.language == "English" else "Analiz ediliyor..."):
                result = llm_chain(text_to_analyze)

            # Dinamik Ã§Ä±ktÄ± formatÄ±
            if st.session_state.language == "TÃ¼rkÃ§e":
                result_display = f"""
                **Duygu Durumu**: {result.split('\n')[0]}\n
                **AÃ§Ä±klama**: {result.split('\n')[1]}
                """
            else:
                result_display = f"""
                **Sentiment**: {result.split('\n')[0]}\n
                **Explanation**: {result.split('\n')[1]}
                """

            # KullanÄ±cÄ± mesajÄ± ve sonuÃ§larÄ± ekrana yazdÄ±rma
            st.chat_message("user").write(text_to_analyze)
            st.chat_message("assistant").write(result_display)

if __name__ == "__main__":
    main()
